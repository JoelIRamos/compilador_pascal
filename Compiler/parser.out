Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Program
Rule 1     Program -> PROGRAM ID LEFTBRACKET variable block RIGHTBRACKET
Rule 2     Program -> PROGRAM ID LEFTBRACKET block RIGHTBRACKET
Rule 3     variable -> VAR variables COLON datatype SEMICOLON
Rule 4     variable -> variable variable
Rule 5     variables -> ID
Rule 6     variables -> variables COMMA variables
Rule 7     datatype -> INT
Rule 8     datatype -> REAL
Rule 9     datatype -> BOOL
Rule 10    datatype -> STR
Rule 11    block -> BEGIN SEMICOLON statement END SEMICOLON
Rule 12    statement -> writestatement
Rule 13    statement -> assignstatement
Rule 14    statement -> ifstatement
Rule 15    statement -> whileloop
Rule 16    statement -> forloop
Rule 17    statement -> statement statement
Rule 18    writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
Rule 19    assignstatement -> ID ASSIGN expression SEMICOLON
Rule 20    assignstatement -> ID PLUSPLUS SEMICOLON
Rule 21    assignstatement -> ID MINUSMINUS SEMICOLON
Rule 22    ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
Rule 23    ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
Rule 24    whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
Rule 25    forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET
Rule 26    increment_decrement -> PLUSPLUS
Rule 27    increment_decrement -> MINUSMINUS
Rule 28    expression -> logical_expression
Rule 29    expression -> relational_expression
Rule 30    expression -> arithmetic_expression
Rule 31    expression -> ID
Rule 32    expression -> STRING
Rule 33    logical_expression -> relational_expression AND relational_expression
Rule 34    logical_expression -> relational_expression OR relational_expression
Rule 35    logical_expression -> LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
Rule 36    relational_expression -> arithmetic_expression GREATER arithmetic_expression
Rule 37    relational_expression -> arithmetic_expression LESSER arithmetic_expression
Rule 38    relational_expression -> arithmetic_expression GREATEREQUAL arithmetic_expression
Rule 39    relational_expression -> arithmetic_expression LESSEREQUAL arithmetic_expression
Rule 40    relational_expression -> arithmetic_expression EQUAL arithmetic_expression
Rule 41    relational_expression -> STRING EQUAL STRING
Rule 42    relational_expression -> LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
Rule 43    relational_expression -> BOOLEAN
Rule 44    arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression
Rule 45    arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression
Rule 46    arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression
Rule 47    arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression
Rule 48    arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
Rule 49    arithmetic_expression -> ID
Rule 50    arithmetic_expression -> INTEGER
Rule 51    arithmetic_expression -> NUMBER
Rule 52    empty -> <empty>

Terminals, with rules where they appear

AND                  : 33
ASSIGN               : 19 25
BEGIN                : 11
BOOL                 : 9
BOOLEAN              : 43
COLON                : 3
COMMA                : 6
DIVIDE               : 47
DO                   : 24
ELSE                 : 23
END                  : 11
EQUAL                : 40 41
FOR                  : 25
GREATER              : 36
GREATEREQUAL         : 38
ID                   : 1 2 5 19 20 21 25 25 31 49
IF                   : 22 23
INT                  : 7
INTEGER              : 50
LEFTBRACKET          : 1 2 22 23 23 24 25
LEFTPARENTHESIS      : 18 22 23 24 25 35 42 48
LESSER               : 37
LESSEREQUAL          : 39
MINUS                : 45
MINUSMINUS           : 21 27
NUMBER               : 51
OR                   : 34
PLUS                 : 44
PLUSPLUS             : 20 26
PROGRAM              : 1 2
REAL                 : 8
RIGHTBRACKET         : 1 2 22 23 23 24 25
RIGHTPARENTHESIS     : 18 22 23 24 25 35 42 48
SEMICOLON            : 3 11 11 18 19 20 21 25 25
STR                  : 10
STRING               : 32 41 41
THEN                 : 22 23
TIMES                : 46
VAR                  : 3
WHILE                : 24
WRITE                : 18
error                : 

Nonterminals, with rules where they appear

Program              : 0
arithmetic_expression : 30 36 36 37 37 38 38 39 39 40 40 44 44 45 45 46 46 47 47 48
assignstatement      : 13
block                : 1 2
datatype             : 3
empty                : 
expression           : 18 19 22 23 24 25 25
forloop              : 16
ifstatement          : 14
increment_decrement  : 25
logical_expression   : 28 35
relational_expression : 29 33 33 34 34 42
statement            : 11 17 17 22 23 23 24 25
variable             : 1 4 4
variables            : 3 6 6
whileloop            : 15
writestatement       : 12

Parsing method: LALR

state 0

    (0) S' -> . Program
    (1) Program -> . PROGRAM ID LEFTBRACKET variable block RIGHTBRACKET
    (2) Program -> . PROGRAM ID LEFTBRACKET block RIGHTBRACKET

    PROGRAM         shift and go to state 2

    Program                        shift and go to state 1

state 1

    (0) S' -> Program .



state 2

    (1) Program -> PROGRAM . ID LEFTBRACKET variable block RIGHTBRACKET
    (2) Program -> PROGRAM . ID LEFTBRACKET block RIGHTBRACKET

    ID              shift and go to state 3


state 3

    (1) Program -> PROGRAM ID . LEFTBRACKET variable block RIGHTBRACKET
    (2) Program -> PROGRAM ID . LEFTBRACKET block RIGHTBRACKET

    LEFTBRACKET     shift and go to state 4


state 4

    (1) Program -> PROGRAM ID LEFTBRACKET . variable block RIGHTBRACKET
    (2) Program -> PROGRAM ID LEFTBRACKET . block RIGHTBRACKET
    (3) variable -> . VAR variables COLON datatype SEMICOLON
    (4) variable -> . variable variable
    (11) block -> . BEGIN SEMICOLON statement END SEMICOLON

    VAR             shift and go to state 7
    BEGIN           shift and go to state 8

    variable                       shift and go to state 5
    block                          shift and go to state 6

state 5

    (1) Program -> PROGRAM ID LEFTBRACKET variable . block RIGHTBRACKET
    (4) variable -> variable . variable
    (11) block -> . BEGIN SEMICOLON statement END SEMICOLON
    (3) variable -> . VAR variables COLON datatype SEMICOLON
    (4) variable -> . variable variable

    BEGIN           shift and go to state 8
    VAR             shift and go to state 7

    variable                       shift and go to state 9
    block                          shift and go to state 10

state 6

    (2) Program -> PROGRAM ID LEFTBRACKET block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 11


state 7

    (3) variable -> VAR . variables COLON datatype SEMICOLON
    (5) variables -> . ID
    (6) variables -> . variables COMMA variables

    ID              shift and go to state 13

    variables                      shift and go to state 12

state 8

    (11) block -> BEGIN . SEMICOLON statement END SEMICOLON

    SEMICOLON       shift and go to state 14


state 9

    (4) variable -> variable variable .
    (4) variable -> variable . variable
    (3) variable -> . VAR variables COLON datatype SEMICOLON
    (4) variable -> . variable variable

  ! shift/reduce conflict for VAR resolved as shift
    BEGIN           reduce using rule 4 (variable -> variable variable .)
    VAR             shift and go to state 7

  ! VAR             [ reduce using rule 4 (variable -> variable variable .) ]

    variable                       shift and go to state 9

state 10

    (1) Program -> PROGRAM ID LEFTBRACKET variable block . RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 15


state 11

    (2) Program -> PROGRAM ID LEFTBRACKET block RIGHTBRACKET .

    $end            reduce using rule 2 (Program -> PROGRAM ID LEFTBRACKET block RIGHTBRACKET .)


state 12

    (3) variable -> VAR variables . COLON datatype SEMICOLON
    (6) variables -> variables . COMMA variables

    COLON           shift and go to state 16
    COMMA           shift and go to state 17


state 13

    (5) variables -> ID .

    COLON           reduce using rule 5 (variables -> ID .)
    COMMA           reduce using rule 5 (variables -> ID .)


state 14

    (11) block -> BEGIN SEMICOLON . statement END SEMICOLON
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 18
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 15

    (1) Program -> PROGRAM ID LEFTBRACKET variable block RIGHTBRACKET .

    $end            reduce using rule 1 (Program -> PROGRAM ID LEFTBRACKET variable block RIGHTBRACKET .)


state 16

    (3) variable -> VAR variables COLON . datatype SEMICOLON
    (7) datatype -> . INT
    (8) datatype -> . REAL
    (9) datatype -> . BOOL
    (10) datatype -> . STR

    INT             shift and go to state 30
    REAL            shift and go to state 31
    BOOL            shift and go to state 32
    STR             shift and go to state 33

    datatype                       shift and go to state 29

state 17

    (6) variables -> variables COMMA . variables
    (5) variables -> . ID
    (6) variables -> . variables COMMA variables

    ID              shift and go to state 13

    variables                      shift and go to state 34

state 18

    (11) block -> BEGIN SEMICOLON statement . END SEMICOLON
    (17) statement -> statement . statement
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    END             shift and go to state 36
    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 35
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 19

    (12) statement -> writestatement .

    END             reduce using rule 12 (statement -> writestatement .)
    WRITE           reduce using rule 12 (statement -> writestatement .)
    ID              reduce using rule 12 (statement -> writestatement .)
    IF              reduce using rule 12 (statement -> writestatement .)
    WHILE           reduce using rule 12 (statement -> writestatement .)
    FOR             reduce using rule 12 (statement -> writestatement .)
    RIGHTBRACKET    reduce using rule 12 (statement -> writestatement .)


state 20

    (13) statement -> assignstatement .

    END             reduce using rule 13 (statement -> assignstatement .)
    WRITE           reduce using rule 13 (statement -> assignstatement .)
    ID              reduce using rule 13 (statement -> assignstatement .)
    IF              reduce using rule 13 (statement -> assignstatement .)
    WHILE           reduce using rule 13 (statement -> assignstatement .)
    FOR             reduce using rule 13 (statement -> assignstatement .)
    RIGHTBRACKET    reduce using rule 13 (statement -> assignstatement .)


state 21

    (14) statement -> ifstatement .

    END             reduce using rule 14 (statement -> ifstatement .)
    WRITE           reduce using rule 14 (statement -> ifstatement .)
    ID              reduce using rule 14 (statement -> ifstatement .)
    IF              reduce using rule 14 (statement -> ifstatement .)
    WHILE           reduce using rule 14 (statement -> ifstatement .)
    FOR             reduce using rule 14 (statement -> ifstatement .)
    RIGHTBRACKET    reduce using rule 14 (statement -> ifstatement .)


state 22

    (15) statement -> whileloop .

    END             reduce using rule 15 (statement -> whileloop .)
    WRITE           reduce using rule 15 (statement -> whileloop .)
    ID              reduce using rule 15 (statement -> whileloop .)
    IF              reduce using rule 15 (statement -> whileloop .)
    WHILE           reduce using rule 15 (statement -> whileloop .)
    FOR             reduce using rule 15 (statement -> whileloop .)
    RIGHTBRACKET    reduce using rule 15 (statement -> whileloop .)


state 23

    (16) statement -> forloop .

    END             reduce using rule 16 (statement -> forloop .)
    WRITE           reduce using rule 16 (statement -> forloop .)
    ID              reduce using rule 16 (statement -> forloop .)
    IF              reduce using rule 16 (statement -> forloop .)
    WHILE           reduce using rule 16 (statement -> forloop .)
    FOR             reduce using rule 16 (statement -> forloop .)
    RIGHTBRACKET    reduce using rule 16 (statement -> forloop .)


state 24

    (18) writestatement -> WRITE . LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON

    LEFTPARENTHESIS shift and go to state 37


state 25

    (19) assignstatement -> ID . ASSIGN expression SEMICOLON
    (20) assignstatement -> ID . PLUSPLUS SEMICOLON
    (21) assignstatement -> ID . MINUSMINUS SEMICOLON

    ASSIGN          shift and go to state 38
    PLUSPLUS        shift and go to state 39
    MINUSMINUS      shift and go to state 40


state 26

    (22) ifstatement -> IF . LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> IF . LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET

    LEFTPARENTHESIS shift and go to state 41


state 27

    (24) whileloop -> WHILE . LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET

    LEFTPARENTHESIS shift and go to state 42


state 28

    (25) forloop -> FOR . LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    LEFTPARENTHESIS shift and go to state 43


state 29

    (3) variable -> VAR variables COLON datatype . SEMICOLON

    SEMICOLON       shift and go to state 44


state 30

    (7) datatype -> INT .

    SEMICOLON       reduce using rule 7 (datatype -> INT .)


state 31

    (8) datatype -> REAL .

    SEMICOLON       reduce using rule 8 (datatype -> REAL .)


state 32

    (9) datatype -> BOOL .

    SEMICOLON       reduce using rule 9 (datatype -> BOOL .)


state 33

    (10) datatype -> STR .

    SEMICOLON       reduce using rule 10 (datatype -> STR .)


state 34

    (6) variables -> variables COMMA variables .
    (6) variables -> variables . COMMA variables

  ! shift/reduce conflict for COMMA resolved as shift
    COLON           reduce using rule 6 (variables -> variables COMMA variables .)
    COMMA           shift and go to state 17

  ! COMMA           [ reduce using rule 6 (variables -> variables COMMA variables .) ]


state 35

    (17) statement -> statement statement .
    (17) statement -> statement . statement
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
    END             reduce using rule 17 (statement -> statement statement .)
    RIGHTBRACKET    reduce using rule 17 (statement -> statement statement .)
    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

  ! WRITE           [ reduce using rule 17 (statement -> statement statement .) ]
  ! ID              [ reduce using rule 17 (statement -> statement statement .) ]
  ! IF              [ reduce using rule 17 (statement -> statement statement .) ]
  ! WHILE           [ reduce using rule 17 (statement -> statement statement .) ]
  ! FOR             [ reduce using rule 17 (statement -> statement statement .) ]

    statement                      shift and go to state 35
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 36

    (11) block -> BEGIN SEMICOLON statement END . SEMICOLON

    SEMICOLON       shift and go to state 45


state 37

    (18) writestatement -> WRITE LEFTPARENTHESIS . expression RIGHTPARENTHESIS SEMICOLON
    (28) expression -> . logical_expression
    (29) expression -> . relational_expression
    (30) expression -> . arithmetic_expression
    (31) expression -> . ID
    (32) expression -> . STRING
    (33) logical_expression -> . relational_expression AND relational_expression
    (34) logical_expression -> . relational_expression OR relational_expression
    (35) logical_expression -> . LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    ID              shift and go to state 51
    STRING          shift and go to state 52
    LEFTPARENTHESIS shift and go to state 46
    BOOLEAN         shift and go to state 53
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    expression                     shift and go to state 47
    logical_expression             shift and go to state 48
    relational_expression          shift and go to state 49
    arithmetic_expression          shift and go to state 50

state 38

    (19) assignstatement -> ID ASSIGN . expression SEMICOLON
    (28) expression -> . logical_expression
    (29) expression -> . relational_expression
    (30) expression -> . arithmetic_expression
    (31) expression -> . ID
    (32) expression -> . STRING
    (33) logical_expression -> . relational_expression AND relational_expression
    (34) logical_expression -> . relational_expression OR relational_expression
    (35) logical_expression -> . LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    ID              shift and go to state 51
    STRING          shift and go to state 52
    LEFTPARENTHESIS shift and go to state 46
    BOOLEAN         shift and go to state 53
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    expression                     shift and go to state 56
    logical_expression             shift and go to state 48
    relational_expression          shift and go to state 49
    arithmetic_expression          shift and go to state 50

state 39

    (20) assignstatement -> ID PLUSPLUS . SEMICOLON

    SEMICOLON       shift and go to state 57


state 40

    (21) assignstatement -> ID MINUSMINUS . SEMICOLON

    SEMICOLON       shift and go to state 58


state 41

    (22) ifstatement -> IF LEFTPARENTHESIS . expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> IF LEFTPARENTHESIS . expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (28) expression -> . logical_expression
    (29) expression -> . relational_expression
    (30) expression -> . arithmetic_expression
    (31) expression -> . ID
    (32) expression -> . STRING
    (33) logical_expression -> . relational_expression AND relational_expression
    (34) logical_expression -> . relational_expression OR relational_expression
    (35) logical_expression -> . LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    ID              shift and go to state 51
    STRING          shift and go to state 52
    LEFTPARENTHESIS shift and go to state 46
    BOOLEAN         shift and go to state 53
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    expression                     shift and go to state 59
    logical_expression             shift and go to state 48
    relational_expression          shift and go to state 49
    arithmetic_expression          shift and go to state 50

state 42

    (24) whileloop -> WHILE LEFTPARENTHESIS . expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (28) expression -> . logical_expression
    (29) expression -> . relational_expression
    (30) expression -> . arithmetic_expression
    (31) expression -> . ID
    (32) expression -> . STRING
    (33) logical_expression -> . relational_expression AND relational_expression
    (34) logical_expression -> . relational_expression OR relational_expression
    (35) logical_expression -> . LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    ID              shift and go to state 51
    STRING          shift and go to state 52
    LEFTPARENTHESIS shift and go to state 46
    BOOLEAN         shift and go to state 53
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    expression                     shift and go to state 60
    logical_expression             shift and go to state 48
    relational_expression          shift and go to state 49
    arithmetic_expression          shift and go to state 50

state 43

    (25) forloop -> FOR LEFTPARENTHESIS . ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    ID              shift and go to state 61


state 44

    (3) variable -> VAR variables COLON datatype SEMICOLON .

    BEGIN           reduce using rule 3 (variable -> VAR variables COLON datatype SEMICOLON .)
    VAR             reduce using rule 3 (variable -> VAR variables COLON datatype SEMICOLON .)


state 45

    (11) block -> BEGIN SEMICOLON statement END SEMICOLON .

    RIGHTBRACKET    reduce using rule 11 (block -> BEGIN SEMICOLON statement END SEMICOLON .)


state 46

    (35) logical_expression -> LEFTPARENTHESIS . logical_expression RIGHTPARENTHESIS
    (42) relational_expression -> LEFTPARENTHESIS . relational_expression RIGHTPARENTHESIS
    (48) arithmetic_expression -> LEFTPARENTHESIS . arithmetic_expression RIGHTPARENTHESIS
    (33) logical_expression -> . relational_expression AND relational_expression
    (34) logical_expression -> . relational_expression OR relational_expression
    (35) logical_expression -> . LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 46
    STRING          shift and go to state 65
    BOOLEAN         shift and go to state 53
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    logical_expression             shift and go to state 62
    relational_expression          shift and go to state 63
    arithmetic_expression          shift and go to state 64

state 47

    (18) writestatement -> WRITE LEFTPARENTHESIS expression . RIGHTPARENTHESIS SEMICOLON

    RIGHTPARENTHESIS shift and go to state 67


state 48

    (28) expression -> logical_expression .

    RIGHTPARENTHESIS reduce using rule 28 (expression -> logical_expression .)
    SEMICOLON       reduce using rule 28 (expression -> logical_expression .)


state 49

    (29) expression -> relational_expression .
    (33) logical_expression -> relational_expression . AND relational_expression
    (34) logical_expression -> relational_expression . OR relational_expression

    RIGHTPARENTHESIS reduce using rule 29 (expression -> relational_expression .)
    SEMICOLON       reduce using rule 29 (expression -> relational_expression .)
    AND             shift and go to state 68
    OR              shift and go to state 69


state 50

    (30) expression -> arithmetic_expression .
    (36) relational_expression -> arithmetic_expression . GREATER arithmetic_expression
    (37) relational_expression -> arithmetic_expression . LESSER arithmetic_expression
    (38) relational_expression -> arithmetic_expression . GREATEREQUAL arithmetic_expression
    (39) relational_expression -> arithmetic_expression . LESSEREQUAL arithmetic_expression
    (40) relational_expression -> arithmetic_expression . EQUAL arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    RIGHTPARENTHESIS reduce using rule 30 (expression -> arithmetic_expression .)
    SEMICOLON       reduce using rule 30 (expression -> arithmetic_expression .)
    GREATER         shift and go to state 70
    LESSER          shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEREQUAL     shift and go to state 73
    EQUAL           shift and go to state 74
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 51

    (31) expression -> ID .
    (49) arithmetic_expression -> ID .

  ! reduce/reduce conflict for RIGHTPARENTHESIS resolved using rule 31 (expression -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 31 (expression -> ID .)
    RIGHTPARENTHESIS reduce using rule 31 (expression -> ID .)
    SEMICOLON       reduce using rule 31 (expression -> ID .)
    GREATER         reduce using rule 49 (arithmetic_expression -> ID .)
    LESSER          reduce using rule 49 (arithmetic_expression -> ID .)
    GREATEREQUAL    reduce using rule 49 (arithmetic_expression -> ID .)
    LESSEREQUAL     reduce using rule 49 (arithmetic_expression -> ID .)
    EQUAL           reduce using rule 49 (arithmetic_expression -> ID .)
    PLUS            reduce using rule 49 (arithmetic_expression -> ID .)
    MINUS           reduce using rule 49 (arithmetic_expression -> ID .)
    TIMES           reduce using rule 49 (arithmetic_expression -> ID .)
    DIVIDE          reduce using rule 49 (arithmetic_expression -> ID .)

  ! RIGHTPARENTHESIS [ reduce using rule 49 (arithmetic_expression -> ID .) ]
  ! SEMICOLON       [ reduce using rule 49 (arithmetic_expression -> ID .) ]


state 52

    (32) expression -> STRING .
    (41) relational_expression -> STRING . EQUAL STRING

    RIGHTPARENTHESIS reduce using rule 32 (expression -> STRING .)
    SEMICOLON       reduce using rule 32 (expression -> STRING .)
    EQUAL           shift and go to state 79


state 53

    (43) relational_expression -> BOOLEAN .

    AND             reduce using rule 43 (relational_expression -> BOOLEAN .)
    OR              reduce using rule 43 (relational_expression -> BOOLEAN .)
    RIGHTPARENTHESIS reduce using rule 43 (relational_expression -> BOOLEAN .)
    SEMICOLON       reduce using rule 43 (relational_expression -> BOOLEAN .)


state 54

    (50) arithmetic_expression -> INTEGER .

    GREATER         reduce using rule 50 (arithmetic_expression -> INTEGER .)
    LESSER          reduce using rule 50 (arithmetic_expression -> INTEGER .)
    GREATEREQUAL    reduce using rule 50 (arithmetic_expression -> INTEGER .)
    LESSEREQUAL     reduce using rule 50 (arithmetic_expression -> INTEGER .)
    EQUAL           reduce using rule 50 (arithmetic_expression -> INTEGER .)
    PLUS            reduce using rule 50 (arithmetic_expression -> INTEGER .)
    MINUS           reduce using rule 50 (arithmetic_expression -> INTEGER .)
    TIMES           reduce using rule 50 (arithmetic_expression -> INTEGER .)
    DIVIDE          reduce using rule 50 (arithmetic_expression -> INTEGER .)
    RIGHTPARENTHESIS reduce using rule 50 (arithmetic_expression -> INTEGER .)
    SEMICOLON       reduce using rule 50 (arithmetic_expression -> INTEGER .)
    AND             reduce using rule 50 (arithmetic_expression -> INTEGER .)
    OR              reduce using rule 50 (arithmetic_expression -> INTEGER .)


state 55

    (51) arithmetic_expression -> NUMBER .

    GREATER         reduce using rule 51 (arithmetic_expression -> NUMBER .)
    LESSER          reduce using rule 51 (arithmetic_expression -> NUMBER .)
    GREATEREQUAL    reduce using rule 51 (arithmetic_expression -> NUMBER .)
    LESSEREQUAL     reduce using rule 51 (arithmetic_expression -> NUMBER .)
    EQUAL           reduce using rule 51 (arithmetic_expression -> NUMBER .)
    PLUS            reduce using rule 51 (arithmetic_expression -> NUMBER .)
    MINUS           reduce using rule 51 (arithmetic_expression -> NUMBER .)
    TIMES           reduce using rule 51 (arithmetic_expression -> NUMBER .)
    DIVIDE          reduce using rule 51 (arithmetic_expression -> NUMBER .)
    RIGHTPARENTHESIS reduce using rule 51 (arithmetic_expression -> NUMBER .)
    SEMICOLON       reduce using rule 51 (arithmetic_expression -> NUMBER .)
    AND             reduce using rule 51 (arithmetic_expression -> NUMBER .)
    OR              reduce using rule 51 (arithmetic_expression -> NUMBER .)


state 56

    (19) assignstatement -> ID ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 80


state 57

    (20) assignstatement -> ID PLUSPLUS SEMICOLON .

    END             reduce using rule 20 (assignstatement -> ID PLUSPLUS SEMICOLON .)
    WRITE           reduce using rule 20 (assignstatement -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 20 (assignstatement -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 20 (assignstatement -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 20 (assignstatement -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 20 (assignstatement -> ID PLUSPLUS SEMICOLON .)
    RIGHTBRACKET    reduce using rule 20 (assignstatement -> ID PLUSPLUS SEMICOLON .)


state 58

    (21) assignstatement -> ID MINUSMINUS SEMICOLON .

    END             reduce using rule 21 (assignstatement -> ID MINUSMINUS SEMICOLON .)
    WRITE           reduce using rule 21 (assignstatement -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 21 (assignstatement -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 21 (assignstatement -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 21 (assignstatement -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 21 (assignstatement -> ID MINUSMINUS SEMICOLON .)
    RIGHTBRACKET    reduce using rule 21 (assignstatement -> ID MINUSMINUS SEMICOLON .)


state 59

    (22) ifstatement -> IF LEFTPARENTHESIS expression . RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> IF LEFTPARENTHESIS expression . RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET

    RIGHTPARENTHESIS shift and go to state 81


state 60

    (24) whileloop -> WHILE LEFTPARENTHESIS expression . RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET

    RIGHTPARENTHESIS shift and go to state 82


state 61

    (25) forloop -> FOR LEFTPARENTHESIS ID . ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    ASSIGN          shift and go to state 83


state 62

    (35) logical_expression -> LEFTPARENTHESIS logical_expression . RIGHTPARENTHESIS

    RIGHTPARENTHESIS shift and go to state 84


state 63

    (42) relational_expression -> LEFTPARENTHESIS relational_expression . RIGHTPARENTHESIS
    (33) logical_expression -> relational_expression . AND relational_expression
    (34) logical_expression -> relational_expression . OR relational_expression

    RIGHTPARENTHESIS shift and go to state 85
    AND             shift and go to state 68
    OR              shift and go to state 69


state 64

    (48) arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression . RIGHTPARENTHESIS
    (36) relational_expression -> arithmetic_expression . GREATER arithmetic_expression
    (37) relational_expression -> arithmetic_expression . LESSER arithmetic_expression
    (38) relational_expression -> arithmetic_expression . GREATEREQUAL arithmetic_expression
    (39) relational_expression -> arithmetic_expression . LESSEREQUAL arithmetic_expression
    (40) relational_expression -> arithmetic_expression . EQUAL arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    RIGHTPARENTHESIS shift and go to state 86
    GREATER         shift and go to state 70
    LESSER          shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEREQUAL     shift and go to state 73
    EQUAL           shift and go to state 74
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 65

    (41) relational_expression -> STRING . EQUAL STRING

    EQUAL           shift and go to state 79


state 66

    (49) arithmetic_expression -> ID .

    RIGHTPARENTHESIS reduce using rule 49 (arithmetic_expression -> ID .)
    GREATER         reduce using rule 49 (arithmetic_expression -> ID .)
    LESSER          reduce using rule 49 (arithmetic_expression -> ID .)
    GREATEREQUAL    reduce using rule 49 (arithmetic_expression -> ID .)
    LESSEREQUAL     reduce using rule 49 (arithmetic_expression -> ID .)
    EQUAL           reduce using rule 49 (arithmetic_expression -> ID .)
    PLUS            reduce using rule 49 (arithmetic_expression -> ID .)
    MINUS           reduce using rule 49 (arithmetic_expression -> ID .)
    TIMES           reduce using rule 49 (arithmetic_expression -> ID .)
    DIVIDE          reduce using rule 49 (arithmetic_expression -> ID .)
    AND             reduce using rule 49 (arithmetic_expression -> ID .)
    OR              reduce using rule 49 (arithmetic_expression -> ID .)
    SEMICOLON       reduce using rule 49 (arithmetic_expression -> ID .)


state 67

    (18) writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS . SEMICOLON

    SEMICOLON       shift and go to state 87


state 68

    (33) logical_expression -> relational_expression AND . relational_expression
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    STRING          shift and go to state 65
    LEFTPARENTHESIS shift and go to state 90
    BOOLEAN         shift and go to state 53
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    relational_expression          shift and go to state 88
    arithmetic_expression          shift and go to state 89

state 69

    (34) logical_expression -> relational_expression OR . relational_expression
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    STRING          shift and go to state 65
    LEFTPARENTHESIS shift and go to state 90
    BOOLEAN         shift and go to state 53
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    relational_expression          shift and go to state 91
    arithmetic_expression          shift and go to state 89

state 70

    (36) relational_expression -> arithmetic_expression GREATER . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 92

state 71

    (37) relational_expression -> arithmetic_expression LESSER . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 94

state 72

    (38) relational_expression -> arithmetic_expression GREATEREQUAL . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 95

state 73

    (39) relational_expression -> arithmetic_expression LESSEREQUAL . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 96

state 74

    (40) relational_expression -> arithmetic_expression EQUAL . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 97

state 75

    (44) arithmetic_expression -> arithmetic_expression PLUS . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 98

state 76

    (45) arithmetic_expression -> arithmetic_expression MINUS . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 99

state 77

    (46) arithmetic_expression -> arithmetic_expression TIMES . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 100

state 78

    (47) arithmetic_expression -> arithmetic_expression DIVIDE . arithmetic_expression
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 101

state 79

    (41) relational_expression -> STRING EQUAL . STRING

    STRING          shift and go to state 102


state 80

    (19) assignstatement -> ID ASSIGN expression SEMICOLON .

    END             reduce using rule 19 (assignstatement -> ID ASSIGN expression SEMICOLON .)
    WRITE           reduce using rule 19 (assignstatement -> ID ASSIGN expression SEMICOLON .)
    ID              reduce using rule 19 (assignstatement -> ID ASSIGN expression SEMICOLON .)
    IF              reduce using rule 19 (assignstatement -> ID ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 19 (assignstatement -> ID ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 19 (assignstatement -> ID ASSIGN expression SEMICOLON .)
    RIGHTBRACKET    reduce using rule 19 (assignstatement -> ID ASSIGN expression SEMICOLON .)


state 81

    (22) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS . THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS . THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET

    THEN            shift and go to state 103


state 82

    (24) whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS . DO LEFTBRACKET statement RIGHTBRACKET

    DO              shift and go to state 104


state 83

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN . expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET
    (28) expression -> . logical_expression
    (29) expression -> . relational_expression
    (30) expression -> . arithmetic_expression
    (31) expression -> . ID
    (32) expression -> . STRING
    (33) logical_expression -> . relational_expression AND relational_expression
    (34) logical_expression -> . relational_expression OR relational_expression
    (35) logical_expression -> . LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    ID              shift and go to state 51
    STRING          shift and go to state 52
    LEFTPARENTHESIS shift and go to state 46
    BOOLEAN         shift and go to state 53
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    expression                     shift and go to state 105
    logical_expression             shift and go to state 48
    relational_expression          shift and go to state 49
    arithmetic_expression          shift and go to state 50

state 84

    (35) logical_expression -> LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS .

    RIGHTPARENTHESIS reduce using rule 35 (logical_expression -> LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS .)
    SEMICOLON       reduce using rule 35 (logical_expression -> LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS .)


state 85

    (42) relational_expression -> LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS .

    AND             reduce using rule 42 (relational_expression -> LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS .)
    OR              reduce using rule 42 (relational_expression -> LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS .)
    RIGHTPARENTHESIS reduce using rule 42 (relational_expression -> LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS .)
    SEMICOLON       reduce using rule 42 (relational_expression -> LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS .)


state 86

    (48) arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .

    GREATER         reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    LESSER          reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    GREATEREQUAL    reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    LESSEREQUAL     reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    EQUAL           reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    PLUS            reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    MINUS           reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    TIMES           reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    DIVIDE          reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    RIGHTPARENTHESIS reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    SEMICOLON       reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    AND             reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)
    OR              reduce using rule 48 (arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS .)


state 87

    (18) writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .

    END             reduce using rule 18 (writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .)
    WRITE           reduce using rule 18 (writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .)
    ID              reduce using rule 18 (writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .)
    IF              reduce using rule 18 (writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .)
    WHILE           reduce using rule 18 (writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .)
    FOR             reduce using rule 18 (writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .)
    RIGHTBRACKET    reduce using rule 18 (writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON .)


state 88

    (33) logical_expression -> relational_expression AND relational_expression .

    RIGHTPARENTHESIS reduce using rule 33 (logical_expression -> relational_expression AND relational_expression .)
    SEMICOLON       reduce using rule 33 (logical_expression -> relational_expression AND relational_expression .)


state 89

    (36) relational_expression -> arithmetic_expression . GREATER arithmetic_expression
    (37) relational_expression -> arithmetic_expression . LESSER arithmetic_expression
    (38) relational_expression -> arithmetic_expression . GREATEREQUAL arithmetic_expression
    (39) relational_expression -> arithmetic_expression . LESSEREQUAL arithmetic_expression
    (40) relational_expression -> arithmetic_expression . EQUAL arithmetic_expression
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    GREATER         shift and go to state 70
    LESSER          shift and go to state 71
    GREATEREQUAL    shift and go to state 72
    LESSEREQUAL     shift and go to state 73
    EQUAL           shift and go to state 74
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 90

    (42) relational_expression -> LEFTPARENTHESIS . relational_expression RIGHTPARENTHESIS
    (48) arithmetic_expression -> LEFTPARENTHESIS . arithmetic_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    STRING          shift and go to state 65
    LEFTPARENTHESIS shift and go to state 90
    BOOLEAN         shift and go to state 53
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    relational_expression          shift and go to state 106
    arithmetic_expression          shift and go to state 64

state 91

    (34) logical_expression -> relational_expression OR relational_expression .

    RIGHTPARENTHESIS reduce using rule 34 (logical_expression -> relational_expression OR relational_expression .)
    SEMICOLON       reduce using rule 34 (logical_expression -> relational_expression OR relational_expression .)


state 92

    (36) relational_expression -> arithmetic_expression GREATER arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    AND             reduce using rule 36 (relational_expression -> arithmetic_expression GREATER arithmetic_expression .)
    OR              reduce using rule 36 (relational_expression -> arithmetic_expression GREATER arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 36 (relational_expression -> arithmetic_expression GREATER arithmetic_expression .)
    SEMICOLON       reduce using rule 36 (relational_expression -> arithmetic_expression GREATER arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 93

    (48) arithmetic_expression -> LEFTPARENTHESIS . arithmetic_expression RIGHTPARENTHESIS
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    LEFTPARENTHESIS shift and go to state 93
    ID              shift and go to state 66
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    arithmetic_expression          shift and go to state 107

state 94

    (37) relational_expression -> arithmetic_expression LESSER arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    AND             reduce using rule 37 (relational_expression -> arithmetic_expression LESSER arithmetic_expression .)
    OR              reduce using rule 37 (relational_expression -> arithmetic_expression LESSER arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 37 (relational_expression -> arithmetic_expression LESSER arithmetic_expression .)
    SEMICOLON       reduce using rule 37 (relational_expression -> arithmetic_expression LESSER arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 95

    (38) relational_expression -> arithmetic_expression GREATEREQUAL arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    AND             reduce using rule 38 (relational_expression -> arithmetic_expression GREATEREQUAL arithmetic_expression .)
    OR              reduce using rule 38 (relational_expression -> arithmetic_expression GREATEREQUAL arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 38 (relational_expression -> arithmetic_expression GREATEREQUAL arithmetic_expression .)
    SEMICOLON       reduce using rule 38 (relational_expression -> arithmetic_expression GREATEREQUAL arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 96

    (39) relational_expression -> arithmetic_expression LESSEREQUAL arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    AND             reduce using rule 39 (relational_expression -> arithmetic_expression LESSEREQUAL arithmetic_expression .)
    OR              reduce using rule 39 (relational_expression -> arithmetic_expression LESSEREQUAL arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 39 (relational_expression -> arithmetic_expression LESSEREQUAL arithmetic_expression .)
    SEMICOLON       reduce using rule 39 (relational_expression -> arithmetic_expression LESSEREQUAL arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 97

    (40) relational_expression -> arithmetic_expression EQUAL arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    AND             reduce using rule 40 (relational_expression -> arithmetic_expression EQUAL arithmetic_expression .)
    OR              reduce using rule 40 (relational_expression -> arithmetic_expression EQUAL arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 40 (relational_expression -> arithmetic_expression EQUAL arithmetic_expression .)
    SEMICOLON       reduce using rule 40 (relational_expression -> arithmetic_expression EQUAL arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 98

    (44) arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    GREATER         reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LESSER          reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    GREATEREQUAL    reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    LESSEREQUAL     reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    EQUAL           reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    SEMICOLON       reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    AND             reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    OR              reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78

  ! PLUS            [ reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 44 (arithmetic_expression -> arithmetic_expression PLUS arithmetic_expression .) ]


state 99

    (45) arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    GREATER         reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LESSER          reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    GREATEREQUAL    reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    LESSEREQUAL     reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    EQUAL           reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    SEMICOLON       reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    AND             reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    OR              reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78

  ! PLUS            [ reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 45 (arithmetic_expression -> arithmetic_expression MINUS arithmetic_expression .) ]


state 100

    (46) arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    GREATER         reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LESSER          reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    GREATEREQUAL    reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    LESSEREQUAL     reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    EQUAL           reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    SEMICOLON       reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    AND             reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    OR              reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78

  ! PLUS            [ reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 46 (arithmetic_expression -> arithmetic_expression TIMES arithmetic_expression .) ]


state 101

    (47) arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    GREATER         reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LESSER          reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    GREATEREQUAL    reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    LESSEREQUAL     reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    EQUAL           reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    RIGHTPARENTHESIS reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    SEMICOLON       reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    AND             reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    OR              reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .)
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78

  ! PLUS            [ reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! MINUS           [ reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! TIMES           [ reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]
  ! DIVIDE          [ reduce using rule 47 (arithmetic_expression -> arithmetic_expression DIVIDE arithmetic_expression .) ]


state 102

    (41) relational_expression -> STRING EQUAL STRING .

    AND             reduce using rule 41 (relational_expression -> STRING EQUAL STRING .)
    OR              reduce using rule 41 (relational_expression -> STRING EQUAL STRING .)
    RIGHTPARENTHESIS reduce using rule 41 (relational_expression -> STRING EQUAL STRING .)
    SEMICOLON       reduce using rule 41 (relational_expression -> STRING EQUAL STRING .)


state 103

    (22) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN . LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN . LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET

    LEFTBRACKET     shift and go to state 108


state 104

    (24) whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO . LEFTBRACKET statement RIGHTBRACKET

    LEFTBRACKET     shift and go to state 109


state 105

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression . SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    SEMICOLON       shift and go to state 110


state 106

    (42) relational_expression -> LEFTPARENTHESIS relational_expression . RIGHTPARENTHESIS

    RIGHTPARENTHESIS shift and go to state 85


state 107

    (48) arithmetic_expression -> LEFTPARENTHESIS arithmetic_expression . RIGHTPARENTHESIS
    (44) arithmetic_expression -> arithmetic_expression . PLUS arithmetic_expression
    (45) arithmetic_expression -> arithmetic_expression . MINUS arithmetic_expression
    (46) arithmetic_expression -> arithmetic_expression . TIMES arithmetic_expression
    (47) arithmetic_expression -> arithmetic_expression . DIVIDE arithmetic_expression

    RIGHTPARENTHESIS shift and go to state 86
    PLUS            shift and go to state 75
    MINUS           shift and go to state 76
    TIMES           shift and go to state 77
    DIVIDE          shift and go to state 78


state 108

    (22) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET . statement RIGHTBRACKET
    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET . statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 111
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 109

    (24) whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET . statement RIGHTBRACKET
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 112
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 110

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON . expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET
    (28) expression -> . logical_expression
    (29) expression -> . relational_expression
    (30) expression -> . arithmetic_expression
    (31) expression -> . ID
    (32) expression -> . STRING
    (33) logical_expression -> . relational_expression AND relational_expression
    (34) logical_expression -> . relational_expression OR relational_expression
    (35) logical_expression -> . LEFTPARENTHESIS logical_expression RIGHTPARENTHESIS
    (36) relational_expression -> . arithmetic_expression GREATER arithmetic_expression
    (37) relational_expression -> . arithmetic_expression LESSER arithmetic_expression
    (38) relational_expression -> . arithmetic_expression GREATEREQUAL arithmetic_expression
    (39) relational_expression -> . arithmetic_expression LESSEREQUAL arithmetic_expression
    (40) relational_expression -> . arithmetic_expression EQUAL arithmetic_expression
    (41) relational_expression -> . STRING EQUAL STRING
    (42) relational_expression -> . LEFTPARENTHESIS relational_expression RIGHTPARENTHESIS
    (43) relational_expression -> . BOOLEAN
    (44) arithmetic_expression -> . arithmetic_expression PLUS arithmetic_expression
    (45) arithmetic_expression -> . arithmetic_expression MINUS arithmetic_expression
    (46) arithmetic_expression -> . arithmetic_expression TIMES arithmetic_expression
    (47) arithmetic_expression -> . arithmetic_expression DIVIDE arithmetic_expression
    (48) arithmetic_expression -> . LEFTPARENTHESIS arithmetic_expression RIGHTPARENTHESIS
    (49) arithmetic_expression -> . ID
    (50) arithmetic_expression -> . INTEGER
    (51) arithmetic_expression -> . NUMBER

    ID              shift and go to state 51
    STRING          shift and go to state 52
    LEFTPARENTHESIS shift and go to state 46
    BOOLEAN         shift and go to state 53
    INTEGER         shift and go to state 54
    NUMBER          shift and go to state 55

    expression                     shift and go to state 113
    logical_expression             shift and go to state 48
    relational_expression          shift and go to state 49
    arithmetic_expression          shift and go to state 50

state 111

    (22) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement . RIGHTBRACKET
    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement . RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (17) statement -> statement . statement
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 114
    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 35
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 112

    (24) whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement . RIGHTBRACKET
    (17) statement -> statement . statement
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 115
    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 35
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 113

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression . SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    SEMICOLON       shift and go to state 116


state 114

    (22) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .
    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET . ELSE LEFTBRACKET statement RIGHTBRACKET

    END             reduce using rule 22 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .)
    WRITE           reduce using rule 22 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .)
    ID              reduce using rule 22 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .)
    IF              reduce using rule 22 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .)
    WHILE           reduce using rule 22 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .)
    FOR             reduce using rule 22 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 22 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET .)
    ELSE            shift and go to state 117


state 115

    (24) whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .

    END             reduce using rule 24 (whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .)
    WRITE           reduce using rule 24 (whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .)
    ID              reduce using rule 24 (whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .)
    IF              reduce using rule 24 (whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .)
    WHILE           reduce using rule 24 (whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .)
    FOR             reduce using rule 24 (whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 24 (whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET .)


state 116

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON . ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    ID              shift and go to state 118


state 117

    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE . LEFTBRACKET statement RIGHTBRACKET

    LEFTBRACKET     shift and go to state 119


state 118

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID . increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET
    (26) increment_decrement -> . PLUSPLUS
    (27) increment_decrement -> . MINUSMINUS

    PLUSPLUS        shift and go to state 121
    MINUSMINUS      shift and go to state 122

    increment_decrement            shift and go to state 120

state 119

    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET . statement RIGHTBRACKET
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 123
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 120

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement . RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    RIGHTPARENTHESIS shift and go to state 124


state 121

    (26) increment_decrement -> PLUSPLUS .

    RIGHTPARENTHESIS reduce using rule 26 (increment_decrement -> PLUSPLUS .)


state 122

    (27) increment_decrement -> MINUSMINUS .

    RIGHTPARENTHESIS reduce using rule 27 (increment_decrement -> MINUSMINUS .)


state 123

    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement . RIGHTBRACKET
    (17) statement -> statement . statement
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 125
    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 35
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 124

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS . LEFTBRACKET statement RIGHTBRACKET

    LEFTBRACKET     shift and go to state 126


state 125

    (23) ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .

    END             reduce using rule 23 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .)
    WRITE           reduce using rule 23 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .)
    ID              reduce using rule 23 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .)
    IF              reduce using rule 23 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .)
    WHILE           reduce using rule 23 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .)
    FOR             reduce using rule 23 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 23 (ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET .)


state 126

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET . statement RIGHTBRACKET
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 127
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 127

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement . RIGHTBRACKET
    (17) statement -> statement . statement
    (12) statement -> . writestatement
    (13) statement -> . assignstatement
    (14) statement -> . ifstatement
    (15) statement -> . whileloop
    (16) statement -> . forloop
    (17) statement -> . statement statement
    (18) writestatement -> . WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON
    (19) assignstatement -> . ID ASSIGN expression SEMICOLON
    (20) assignstatement -> . ID PLUSPLUS SEMICOLON
    (21) assignstatement -> . ID MINUSMINUS SEMICOLON
    (22) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET
    (23) ifstatement -> . IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET ELSE LEFTBRACKET statement RIGHTBRACKET
    (24) whileloop -> . WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET
    (25) forloop -> . FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET

    RIGHTBRACKET    shift and go to state 128
    WRITE           shift and go to state 24
    ID              shift and go to state 25
    IF              shift and go to state 26
    WHILE           shift and go to state 27
    FOR             shift and go to state 28

    statement                      shift and go to state 35
    writestatement                 shift and go to state 19
    assignstatement                shift and go to state 20
    ifstatement                    shift and go to state 21
    whileloop                      shift and go to state 22
    forloop                        shift and go to state 23

state 128

    (25) forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .

    END             reduce using rule 25 (forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .)
    WRITE           reduce using rule 25 (forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .)
    ID              reduce using rule 25 (forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .)
    IF              reduce using rule 25 (forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .)
    WHILE           reduce using rule 25 (forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .)
    FOR             reduce using rule 25 (forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 25 (forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON ID increment_decrement RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for VAR in state 9 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 34 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 35 resolved as shift
WARNING: shift/reduce conflict for ID in state 35 resolved as shift
WARNING: shift/reduce conflict for IF in state 35 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 35 resolved as shift
WARNING: shift/reduce conflict for FOR in state 35 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: reduce/reduce conflict in state 51 resolved using rule (expression -> ID)
WARNING: rejected rule (arithmetic_expression -> ID) in state 51
