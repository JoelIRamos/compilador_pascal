
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BEGIN BOOL BOOLEAN COLON COMMA DIVIDE DO ELSE END EQUAL FOR GREATER GREATEREQUAL ID IF INT INTEGER LEFTBRACKET LEFTPARENTHESIS LESSER LESSEREQUAL MINUS MINUSMINUS NUMBER OR PLUS PLUSPLUS PROGRAM REAL RIGHTBRACKET RIGHTPARENTHESIS SEMICOLON STR STRING THEN TIMES VAR WHILE WRITE\n  Program : PROGRAM ID LEFTBRACKET variable block RIGHTBRACKET\n  \n  variable : VAR ID variables COLON datatype SEMICOLON variable\n           | empty\n  \n  variables : COMMA ID variables\n            | empty\n  \n  datatype : INT\n           | REAL\n           | BOOL\n           | STR\n  \n  block : BEGIN SEMICOLON statement END SEMICOLON\n  \n  statement : writestatement statement\n            | assignstatement statement\n            | ifstatement statement\n            | whileloop statement\n            | forloop statement\n            | empty\n  \n  writestatement : WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON\n  \n  assignstatement : ID ASSIGN expression SEMICOLON\n  \n  ifstatement : IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET elsestatement\n  \n  elsestatement : ELSE LEFTBRACKET statement RIGHTBRACKET\n                | empty\n  \n  whileloop : WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET\n  \n  forloop : FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON formodifier RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET\n  \n  formodifier : ID PLUSPLUS\n              | ID MINUSMINUS\n  \n  expression : simpleexpression\n             | simpleexpression relationaloperators simpleexpression\n  \n  relationaloperators : EQUAL\n                      | LESSER\n                      | GREATER\n                      | LESSEREQUAL\n                      | GREATEREQUAL\n  \n  simpleexpression : term\n                   | term PLUS simpleexpression\n                   | term MINUS simpleexpression\n                   | term OR simpleexpression\n  \n  term : fact\n       | fact TIMES term\n       | fact MINUS term\n       | fact DIVIDE term\n       | fact AND term\n  \n  fact : unaryoperator ID\n       | unaryoperator LEFTPARENTHESIS expression RIGHTPARENTHESIS\n       | unaryoperator INTEGER\n       | unaryoperator NUMBER\n       | unaryoperator STRING\n       | unaryoperator BOOLEAN\n  \n  unaryoperator : PLUS\n                | MINUS\n                | empty\n  \n  empty :\n  '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,11,],[0,-1,]),'ID':([2,6,12,14,17,18,19,20,21,36,37,38,39,40,51,52,54,55,62,63,64,65,66,67,68,69,70,71,72,73,74,76,81,84,86,100,101,102,106,107,108,109,111,114,119,120,122,],[3,10,24,29,24,24,24,24,24,-51,-51,-51,-51,59,-48,-49,75,-50,-51,-28,-29,-30,-31,-32,-51,-51,-51,-51,-51,-51,-51,-51,-18,-51,-17,24,24,-51,-51,-22,112,-19,-21,24,24,-20,-23,]),'LEFTBRACKET':([3,96,97,110,117,],[4,100,101,114,119,]),'VAR':([4,60,],[6,6,]),'BEGIN':([4,5,7,60,85,],[-51,9,-3,-51,-2,]),'RIGHTBRACKET':([8,17,18,19,20,21,22,31,32,33,34,35,47,81,86,100,101,103,104,106,107,109,111,114,118,119,120,121,122,],[11,-51,-51,-51,-51,-51,-16,-11,-12,-13,-14,-15,-10,-18,-17,-51,-51,106,107,-51,-22,-19,-21,-51,120,-51,-20,122,-23,]),'SEMICOLON':([9,30,41,42,43,44,45,49,50,53,56,61,75,77,78,79,80,87,88,89,90,91,92,93,94,98,99,105,],[12,47,60,-6,-7,-8,-9,-26,-33,-37,81,86,-42,-44,-45,-46,-47,-27,-34,-35,-36,-38,-39,-40,-41,102,-43,108,]),'COMMA':([10,29,],[14,14,]),'COLON':([10,13,15,29,46,],[-51,28,-5,-51,-4,]),'WRITE':([12,17,18,19,20,21,81,86,100,101,106,107,109,111,114,119,120,122,],[23,23,23,23,23,23,-18,-17,23,23,-51,-22,-19,-21,23,23,-20,-23,]),'IF':([12,17,18,19,20,21,81,86,100,101,106,107,109,111,114,119,120,122,],[25,25,25,25,25,25,-18,-17,25,25,-51,-22,-19,-21,25,25,-20,-23,]),'WHILE':([12,17,18,19,20,21,81,86,100,101,106,107,109,111,114,119,120,122,],[26,26,26,26,26,26,-18,-17,26,26,-51,-22,-19,-21,26,26,-20,-23,]),'FOR':([12,17,18,19,20,21,81,86,100,101,106,107,109,111,114,119,120,122,],[27,27,27,27,27,27,-18,-17,27,27,-51,-22,-19,-21,27,27,-20,-23,]),'END':([12,16,17,18,19,20,21,22,31,32,33,34,35,81,86,106,107,109,111,120,122,],[-51,30,-51,-51,-51,-51,-51,-16,-11,-12,-13,-14,-15,-18,-17,-51,-22,-19,-21,-20,-23,]),'LEFTPARENTHESIS':([23,25,26,27,36,37,38,39,51,52,54,55,62,63,64,65,66,67,68,69,70,71,72,73,74,76,84,102,],[36,38,39,40,-51,-51,-51,-51,-48,-49,76,-50,-51,-28,-29,-30,-31,-32,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,]),'ASSIGN':([24,59,],[37,84,]),'INT':([28,],[42,]),'REAL':([28,],[43,]),'BOOL':([28,],[44,]),'STR':([28,],[45,]),'PLUS':([36,37,38,39,50,53,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,91,92,93,94,99,102,],[51,51,51,51,68,-37,51,-28,-29,-30,-31,-32,51,51,51,51,51,51,51,-42,51,-44,-45,-46,-47,51,-38,-39,-40,-41,-43,51,]),'MINUS':([36,37,38,39,50,53,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,84,91,92,93,94,99,102,],[52,52,52,52,69,72,52,-28,-29,-30,-31,-32,52,52,52,52,52,52,52,-42,52,-44,-45,-46,-47,52,-38,-39,-40,-41,-43,52,]),'INTEGER':([36,37,38,39,51,52,54,55,62,63,64,65,66,67,68,69,70,71,72,73,74,76,84,102,],[-51,-51,-51,-51,-48,-49,77,-50,-51,-28,-29,-30,-31,-32,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,]),'NUMBER':([36,37,38,39,51,52,54,55,62,63,64,65,66,67,68,69,70,71,72,73,74,76,84,102,],[-51,-51,-51,-51,-48,-49,78,-50,-51,-28,-29,-30,-31,-32,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,]),'STRING':([36,37,38,39,51,52,54,55,62,63,64,65,66,67,68,69,70,71,72,73,74,76,84,102,],[-51,-51,-51,-51,-48,-49,79,-50,-51,-28,-29,-30,-31,-32,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,]),'BOOLEAN':([36,37,38,39,51,52,54,55,62,63,64,65,66,67,68,69,70,71,72,73,74,76,84,102,],[-51,-51,-51,-51,-48,-49,80,-50,-51,-28,-29,-30,-31,-32,-51,-51,-51,-51,-51,-51,-51,-51,-51,-51,]),'RIGHTPARENTHESIS':([48,49,50,53,57,58,75,77,78,79,80,87,88,89,90,91,92,93,94,95,99,113,115,116,],[61,-26,-33,-37,82,83,-42,-44,-45,-46,-47,-27,-34,-35,-36,-38,-39,-40,-41,99,-43,117,-24,-25,]),'EQUAL':([49,50,53,75,77,78,79,80,88,89,90,91,92,93,94,99,],[63,-33,-37,-42,-44,-45,-46,-47,-34,-35,-36,-38,-39,-40,-41,-43,]),'LESSER':([49,50,53,75,77,78,79,80,88,89,90,91,92,93,94,99,],[64,-33,-37,-42,-44,-45,-46,-47,-34,-35,-36,-38,-39,-40,-41,-43,]),'GREATER':([49,50,53,75,77,78,79,80,88,89,90,91,92,93,94,99,],[65,-33,-37,-42,-44,-45,-46,-47,-34,-35,-36,-38,-39,-40,-41,-43,]),'LESSEREQUAL':([49,50,53,75,77,78,79,80,88,89,90,91,92,93,94,99,],[66,-33,-37,-42,-44,-45,-46,-47,-34,-35,-36,-38,-39,-40,-41,-43,]),'GREATEREQUAL':([49,50,53,75,77,78,79,80,88,89,90,91,92,93,94,99,],[67,-33,-37,-42,-44,-45,-46,-47,-34,-35,-36,-38,-39,-40,-41,-43,]),'OR':([50,53,75,77,78,79,80,91,92,93,94,99,],[70,-37,-42,-44,-45,-46,-47,-38,-39,-40,-41,-43,]),'TIMES':([53,75,77,78,79,80,99,],[71,-42,-44,-45,-46,-47,-43,]),'DIVIDE':([53,75,77,78,79,80,99,],[73,-42,-44,-45,-46,-47,-43,]),'AND':([53,75,77,78,79,80,99,],[74,-42,-44,-45,-46,-47,-43,]),'THEN':([82,],[96,]),'DO':([83,],[97,]),'ELSE':([106,],[110,]),'PLUSPLUS':([112,],[115,]),'MINUSMINUS':([112,],[116,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'variable':([4,60,],[5,85,]),'empty':([4,10,12,17,18,19,20,21,29,36,37,38,39,60,62,68,69,70,71,72,73,74,76,84,100,101,102,106,114,119,],[7,15,22,22,22,22,22,22,15,55,55,55,55,7,55,55,55,55,55,55,55,55,55,55,22,22,55,111,22,22,]),'block':([5,],[8,]),'variables':([10,29,],[13,46,]),'statement':([12,17,18,19,20,21,100,101,114,119,],[16,31,32,33,34,35,103,104,118,121,]),'writestatement':([12,17,18,19,20,21,100,101,114,119,],[17,17,17,17,17,17,17,17,17,17,]),'assignstatement':([12,17,18,19,20,21,100,101,114,119,],[18,18,18,18,18,18,18,18,18,18,]),'ifstatement':([12,17,18,19,20,21,100,101,114,119,],[19,19,19,19,19,19,19,19,19,19,]),'whileloop':([12,17,18,19,20,21,100,101,114,119,],[20,20,20,20,20,20,20,20,20,20,]),'forloop':([12,17,18,19,20,21,100,101,114,119,],[21,21,21,21,21,21,21,21,21,21,]),'datatype':([28,],[41,]),'expression':([36,37,38,39,76,84,102,],[48,56,57,58,95,98,105,]),'simpleexpression':([36,37,38,39,62,68,69,70,76,84,102,],[49,49,49,49,87,88,89,90,49,49,49,]),'term':([36,37,38,39,62,68,69,70,71,72,73,74,76,84,102,],[50,50,50,50,50,50,50,50,91,92,93,94,50,50,50,]),'fact':([36,37,38,39,62,68,69,70,71,72,73,74,76,84,102,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unaryoperator':([36,37,38,39,62,68,69,70,71,72,73,74,76,84,102,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'relationaloperators':([49,],[62,]),'elsestatement':([106,],[109,]),'formodifier':([108,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> PROGRAM ID LEFTBRACKET variable block RIGHTBRACKET','Program',6,'p_program','Parser.py',21),
  ('variable -> VAR ID variables COLON datatype SEMICOLON variable','variable',7,'p_variable','Parser.py',28),
  ('variable -> empty','variable',1,'p_variable','Parser.py',29),
  ('variables -> COMMA ID variables','variables',3,'p_variables','Parser.py',36),
  ('variables -> empty','variables',1,'p_variables','Parser.py',37),
  ('datatype -> INT','datatype',1,'p_datatype','Parser.py',44),
  ('datatype -> REAL','datatype',1,'p_datatype','Parser.py',45),
  ('datatype -> BOOL','datatype',1,'p_datatype','Parser.py',46),
  ('datatype -> STR','datatype',1,'p_datatype','Parser.py',47),
  ('block -> BEGIN SEMICOLON statement END SEMICOLON','block',5,'p_block','Parser.py',54),
  ('statement -> writestatement statement','statement',2,'p_statement','Parser.py',61),
  ('statement -> assignstatement statement','statement',2,'p_statement','Parser.py',62),
  ('statement -> ifstatement statement','statement',2,'p_statement','Parser.py',63),
  ('statement -> whileloop statement','statement',2,'p_statement','Parser.py',64),
  ('statement -> forloop statement','statement',2,'p_statement','Parser.py',65),
  ('statement -> empty','statement',1,'p_statement','Parser.py',66),
  ('writestatement -> WRITE LEFTPARENTHESIS expression RIGHTPARENTHESIS SEMICOLON','writestatement',5,'p_writestatement','Parser.py',73),
  ('assignstatement -> ID ASSIGN expression SEMICOLON','assignstatement',4,'p_assignstatement','Parser.py',80),
  ('ifstatement -> IF LEFTPARENTHESIS expression RIGHTPARENTHESIS THEN LEFTBRACKET statement RIGHTBRACKET elsestatement','ifstatement',9,'p_ifstatement','Parser.py',88),
  ('elsestatement -> ELSE LEFTBRACKET statement RIGHTBRACKET','elsestatement',4,'p_elsestatement','Parser.py',95),
  ('elsestatement -> empty','elsestatement',1,'p_elsestatement','Parser.py',96),
  ('whileloop -> WHILE LEFTPARENTHESIS expression RIGHTPARENTHESIS DO LEFTBRACKET statement RIGHTBRACKET','whileloop',8,'p_whileloop','Parser.py',103),
  ('forloop -> FOR LEFTPARENTHESIS ID ASSIGN expression SEMICOLON expression SEMICOLON formodifier RIGHTPARENTHESIS LEFTBRACKET statement RIGHTBRACKET','forloop',13,'p_forloop','Parser.py',110),
  ('formodifier -> ID PLUSPLUS','formodifier',2,'p_formodifier','Parser.py',117),
  ('formodifier -> ID MINUSMINUS','formodifier',2,'p_formodifier','Parser.py',118),
  ('expression -> simpleexpression','expression',1,'p_expression','Parser.py',125),
  ('expression -> simpleexpression relationaloperators simpleexpression','expression',3,'p_expression','Parser.py',126),
  ('relationaloperators -> EQUAL','relationaloperators',1,'p_relationaloperators','Parser.py',133),
  ('relationaloperators -> LESSER','relationaloperators',1,'p_relationaloperators','Parser.py',134),
  ('relationaloperators -> GREATER','relationaloperators',1,'p_relationaloperators','Parser.py',135),
  ('relationaloperators -> LESSEREQUAL','relationaloperators',1,'p_relationaloperators','Parser.py',136),
  ('relationaloperators -> GREATEREQUAL','relationaloperators',1,'p_relationaloperators','Parser.py',137),
  ('simpleexpression -> term','simpleexpression',1,'p_simpleexpression','Parser.py',144),
  ('simpleexpression -> term PLUS simpleexpression','simpleexpression',3,'p_simpleexpression','Parser.py',145),
  ('simpleexpression -> term MINUS simpleexpression','simpleexpression',3,'p_simpleexpression','Parser.py',146),
  ('simpleexpression -> term OR simpleexpression','simpleexpression',3,'p_simpleexpression','Parser.py',147),
  ('term -> fact','term',1,'p_term','Parser.py',154),
  ('term -> fact TIMES term','term',3,'p_term','Parser.py',155),
  ('term -> fact MINUS term','term',3,'p_term','Parser.py',156),
  ('term -> fact DIVIDE term','term',3,'p_term','Parser.py',157),
  ('term -> fact AND term','term',3,'p_term','Parser.py',158),
  ('fact -> unaryoperator ID','fact',2,'p_fact','Parser.py',165),
  ('fact -> unaryoperator LEFTPARENTHESIS expression RIGHTPARENTHESIS','fact',4,'p_fact','Parser.py',166),
  ('fact -> unaryoperator INTEGER','fact',2,'p_fact','Parser.py',167),
  ('fact -> unaryoperator NUMBER','fact',2,'p_fact','Parser.py',168),
  ('fact -> unaryoperator STRING','fact',2,'p_fact','Parser.py',169),
  ('fact -> unaryoperator BOOLEAN','fact',2,'p_fact','Parser.py',170),
  ('unaryoperator -> PLUS','unaryoperator',1,'p_unaryoperator','Parser.py',178),
  ('unaryoperator -> MINUS','unaryoperator',1,'p_unaryoperator','Parser.py',179),
  ('unaryoperator -> empty','unaryoperator',1,'p_unaryoperator','Parser.py',180),
  ('empty -> <empty>','empty',0,'p_empty','Parser.py',187),
]
